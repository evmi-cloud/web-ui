// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file evm_indexer/v1/evm_indexer.proto (package evm_indexer.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * @generated from message evm_indexer.v1.LogSource
 */
export class LogSource extends Message<LogSource> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string type = 2;
   */
  type = "";

  /**
   * @generated from field: repeated evm_indexer.v1.LogSourceContract contracts = 3;
   */
  contracts: LogSourceContract[] = [];

  /**
   * @generated from field: string topic = 4;
   */
  topic = "";

  /**
   * @generated from field: uint64 start_block = 5;
   */
  startBlock = protoInt64.zero;

  /**
   * @generated from field: uint64 latest_block_indexed = 6;
   */
  latestBlockIndexed = protoInt64.zero;

  constructor(data?: PartialMessage<LogSource>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "evm_indexer.v1.LogSource";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "contracts", kind: "message", T: LogSourceContract, repeated: true },
    { no: 4, name: "topic", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "start_block", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 6, name: "latest_block_indexed", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LogSource {
    return new LogSource().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LogSource {
    return new LogSource().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LogSource {
    return new LogSource().fromJsonString(jsonString, options);
  }

  static equals(a: LogSource | PlainMessage<LogSource> | undefined, b: LogSource | PlainMessage<LogSource> | undefined): boolean {
    return proto3.util.equals(LogSource, a, b);
  }
}

/**
 * @generated from message evm_indexer.v1.LogSourceContract
 */
export class LogSourceContract extends Message<LogSourceContract> {
  /**
   * @generated from field: string address = 1;
   */
  address = "";

  /**
   * @generated from field: string contract_name = 2;
   */
  contractName = "";

  constructor(data?: PartialMessage<LogSourceContract>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "evm_indexer.v1.LogSourceContract";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "contract_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LogSourceContract {
    return new LogSourceContract().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LogSourceContract {
    return new LogSourceContract().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LogSourceContract {
    return new LogSourceContract().fromJsonString(jsonString, options);
  }

  static equals(a: LogSourceContract | PlainMessage<LogSourceContract> | undefined, b: LogSourceContract | PlainMessage<LogSourceContract> | undefined): boolean {
    return proto3.util.equals(LogSourceContract, a, b);
  }
}

/**
 * @generated from message evm_indexer.v1.LogStoreStatus
 */
export class LogStoreStatus extends Message<LogStoreStatus> {
  /**
   * @generated from field: string status = 1;
   */
  status = "";

  /**
   * @generated from field: uint64 latest_block_indexed = 2;
   */
  latestBlockIndexed = protoInt64.zero;

  constructor(data?: PartialMessage<LogStoreStatus>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "evm_indexer.v1.LogStoreStatus";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "latest_block_indexed", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LogStoreStatus {
    return new LogStoreStatus().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LogStoreStatus {
    return new LogStoreStatus().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LogStoreStatus {
    return new LogStoreStatus().fromJsonString(jsonString, options);
  }

  static equals(a: LogStoreStatus | PlainMessage<LogStoreStatus> | undefined, b: LogStoreStatus | PlainMessage<LogStoreStatus> | undefined): boolean {
    return proto3.util.equals(LogStoreStatus, a, b);
  }
}

/**
 * @generated from message evm_indexer.v1.EvmMetadata
 */
export class EvmMetadata extends Message<EvmMetadata> {
  /**
   * @generated from field: string contract_name = 1;
   */
  contractName = "";

  /**
   * @generated from field: string event_name = 2;
   */
  eventName = "";

  /**
   * @generated from field: string function_name = 3;
   */
  functionName = "";

  /**
   * @generated from field: map<string, string> data = 4;
   */
  data: { [key: string]: string } = {};

  constructor(data?: PartialMessage<EvmMetadata>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "evm_indexer.v1.EvmMetadata";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "contract_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "event_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "function_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "data", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EvmMetadata {
    return new EvmMetadata().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EvmMetadata {
    return new EvmMetadata().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EvmMetadata {
    return new EvmMetadata().fromJsonString(jsonString, options);
  }

  static equals(a: EvmMetadata | PlainMessage<EvmMetadata> | undefined, b: EvmMetadata | PlainMessage<EvmMetadata> | undefined): boolean {
    return proto3.util.equals(EvmMetadata, a, b);
  }
}

/**
 * @generated from message evm_indexer.v1.EvmLog
 */
export class EvmLog extends Message<EvmLog> {
  /**
   * @generated from field: string address = 1;
   */
  address = "";

  /**
   * @generated from field: repeated string topics = 2;
   */
  topics: string[] = [];

  /**
   * @generated from field: string data = 3;
   */
  data = "";

  /**
   * @generated from field: uint64 block_number = 4;
   */
  blockNumber = protoInt64.zero;

  /**
   * @generated from field: string transaction_hash = 5;
   */
  transactionHash = "";

  /**
   * @generated from field: uint64 transaction_index = 6;
   */
  transactionIndex = protoInt64.zero;

  /**
   * @generated from field: string block_hash = 7;
   */
  blockHash = "";

  /**
   * @generated from field: uint64 log_index = 8;
   */
  logIndex = protoInt64.zero;

  /**
   * @generated from field: bool removed = 9;
   */
  removed = false;

  /**
   * @generated from field: uint64 minted_at = 10;
   */
  mintedAt = protoInt64.zero;

  /**
   * @generated from field: optional evm_indexer.v1.EvmMetadata metadata = 11;
   */
  metadata?: EvmMetadata;

  constructor(data?: PartialMessage<EvmLog>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "evm_indexer.v1.EvmLog";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "topics", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 3, name: "data", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "block_number", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 5, name: "transaction_hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "transaction_index", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 7, name: "block_hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "log_index", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 9, name: "removed", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 10, name: "minted_at", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 11, name: "metadata", kind: "message", T: EvmMetadata, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EvmLog {
    return new EvmLog().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EvmLog {
    return new EvmLog().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EvmLog {
    return new EvmLog().fromJsonString(jsonString, options);
  }

  static equals(a: EvmLog | PlainMessage<EvmLog> | undefined, b: EvmLog | PlainMessage<EvmLog> | undefined): boolean {
    return proto3.util.equals(EvmLog, a, b);
  }
}

/**
 * @generated from message evm_indexer.v1.LogStore
 */
export class LogStore extends Message<LogStore> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string identifier = 2;
   */
  identifier = "";

  /**
   * @generated from field: string description = 3;
   */
  description = "";

  /**
   * @generated from field: string rpc_url = 5;
   */
  rpcUrl = "";

  /**
   * @generated from field: string status = 6;
   */
  status = "";

  /**
   * @generated from field: uint64 chainId = 7;
   */
  chainId = protoInt64.zero;

  /**
   * @generated from field: repeated evm_indexer.v1.LogSource sources = 8;
   */
  sources: LogSource[] = [];

  constructor(data?: PartialMessage<LogStore>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "evm_indexer.v1.LogStore";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "identifier", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "rpc_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "status", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "chainId", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 8, name: "sources", kind: "message", T: LogSource, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LogStore {
    return new LogStore().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LogStore {
    return new LogStore().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LogStore {
    return new LogStore().fromJsonString(jsonString, options);
  }

  static equals(a: LogStore | PlainMessage<LogStore> | undefined, b: LogStore | PlainMessage<LogStore> | undefined): boolean {
    return proto3.util.equals(LogStore, a, b);
  }
}

/**
 * @generated from message evm_indexer.v1.GetStoresRequest
 */
export class GetStoresRequest extends Message<GetStoresRequest> {
  constructor(data?: PartialMessage<GetStoresRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "evm_indexer.v1.GetStoresRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetStoresRequest {
    return new GetStoresRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetStoresRequest {
    return new GetStoresRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetStoresRequest {
    return new GetStoresRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetStoresRequest | PlainMessage<GetStoresRequest> | undefined, b: GetStoresRequest | PlainMessage<GetStoresRequest> | undefined): boolean {
    return proto3.util.equals(GetStoresRequest, a, b);
  }
}

/**
 * @generated from message evm_indexer.v1.GetStoresResponse
 */
export class GetStoresResponse extends Message<GetStoresResponse> {
  /**
   * @generated from field: bool success = 1;
   */
  success = false;

  /**
   * @generated from field: string error = 2;
   */
  error = "";

  /**
   * @generated from field: repeated evm_indexer.v1.LogStore stores = 3;
   */
  stores: LogStore[] = [];

  constructor(data?: PartialMessage<GetStoresResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "evm_indexer.v1.GetStoresResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "success", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "error", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "stores", kind: "message", T: LogStore, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetStoresResponse {
    return new GetStoresResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetStoresResponse {
    return new GetStoresResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetStoresResponse {
    return new GetStoresResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetStoresResponse | PlainMessage<GetStoresResponse> | undefined, b: GetStoresResponse | PlainMessage<GetStoresResponse> | undefined): boolean {
    return proto3.util.equals(GetStoresResponse, a, b);
  }
}

/**
 * @generated from message evm_indexer.v1.StartPipelineRequest
 */
export class StartPipelineRequest extends Message<StartPipelineRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<StartPipelineRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "evm_indexer.v1.StartPipelineRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StartPipelineRequest {
    return new StartPipelineRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StartPipelineRequest {
    return new StartPipelineRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StartPipelineRequest {
    return new StartPipelineRequest().fromJsonString(jsonString, options);
  }

  static equals(a: StartPipelineRequest | PlainMessage<StartPipelineRequest> | undefined, b: StartPipelineRequest | PlainMessage<StartPipelineRequest> | undefined): boolean {
    return proto3.util.equals(StartPipelineRequest, a, b);
  }
}

/**
 * @generated from message evm_indexer.v1.StartPipelineResponse
 */
export class StartPipelineResponse extends Message<StartPipelineResponse> {
  /**
   * @generated from field: bool success = 1;
   */
  success = false;

  /**
   * @generated from field: string error = 2;
   */
  error = "";

  constructor(data?: PartialMessage<StartPipelineResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "evm_indexer.v1.StartPipelineResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "success", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "error", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StartPipelineResponse {
    return new StartPipelineResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StartPipelineResponse {
    return new StartPipelineResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StartPipelineResponse {
    return new StartPipelineResponse().fromJsonString(jsonString, options);
  }

  static equals(a: StartPipelineResponse | PlainMessage<StartPipelineResponse> | undefined, b: StartPipelineResponse | PlainMessage<StartPipelineResponse> | undefined): boolean {
    return proto3.util.equals(StartPipelineResponse, a, b);
  }
}

/**
 * @generated from message evm_indexer.v1.StopPipelineRequest
 */
export class StopPipelineRequest extends Message<StopPipelineRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<StopPipelineRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "evm_indexer.v1.StopPipelineRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StopPipelineRequest {
    return new StopPipelineRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StopPipelineRequest {
    return new StopPipelineRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StopPipelineRequest {
    return new StopPipelineRequest().fromJsonString(jsonString, options);
  }

  static equals(a: StopPipelineRequest | PlainMessage<StopPipelineRequest> | undefined, b: StopPipelineRequest | PlainMessage<StopPipelineRequest> | undefined): boolean {
    return proto3.util.equals(StopPipelineRequest, a, b);
  }
}

/**
 * @generated from message evm_indexer.v1.StopPipelineResponse
 */
export class StopPipelineResponse extends Message<StopPipelineResponse> {
  /**
   * @generated from field: bool success = 1;
   */
  success = false;

  /**
   * @generated from field: string error = 2;
   */
  error = "";

  constructor(data?: PartialMessage<StopPipelineResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "evm_indexer.v1.StopPipelineResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "success", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "error", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StopPipelineResponse {
    return new StopPipelineResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StopPipelineResponse {
    return new StopPipelineResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StopPipelineResponse {
    return new StopPipelineResponse().fromJsonString(jsonString, options);
  }

  static equals(a: StopPipelineResponse | PlainMessage<StopPipelineResponse> | undefined, b: StopPipelineResponse | PlainMessage<StopPipelineResponse> | undefined): boolean {
    return proto3.util.equals(StopPipelineResponse, a, b);
  }
}

/**
 * @generated from message evm_indexer.v1.GetStoreLogsRequest
 */
export class GetStoreLogsRequest extends Message<GetStoreLogsRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: uint64 from_block = 2;
   */
  fromBlock = protoInt64.zero;

  /**
   * @generated from field: uint64 to_block = 3;
   */
  toBlock = protoInt64.zero;

  /**
   * @generated from field: uint64 limit = 4;
   */
  limit = protoInt64.zero;

  /**
   * @generated from field: uint64 offset = 5;
   */
  offset = protoInt64.zero;

  constructor(data?: PartialMessage<GetStoreLogsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "evm_indexer.v1.GetStoreLogsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "from_block", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "to_block", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "limit", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 5, name: "offset", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetStoreLogsRequest {
    return new GetStoreLogsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetStoreLogsRequest {
    return new GetStoreLogsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetStoreLogsRequest {
    return new GetStoreLogsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetStoreLogsRequest | PlainMessage<GetStoreLogsRequest> | undefined, b: GetStoreLogsRequest | PlainMessage<GetStoreLogsRequest> | undefined): boolean {
    return proto3.util.equals(GetStoreLogsRequest, a, b);
  }
}

/**
 * @generated from message evm_indexer.v1.GetStoreLogsResponse
 */
export class GetStoreLogsResponse extends Message<GetStoreLogsResponse> {
  /**
   * @generated from field: bool success = 1;
   */
  success = false;

  /**
   * @generated from field: string error = 2;
   */
  error = "";

  /**
   * @generated from field: repeated evm_indexer.v1.EvmLog logs = 3;
   */
  logs: EvmLog[] = [];

  constructor(data?: PartialMessage<GetStoreLogsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "evm_indexer.v1.GetStoreLogsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "success", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "error", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "logs", kind: "message", T: EvmLog, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetStoreLogsResponse {
    return new GetStoreLogsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetStoreLogsResponse {
    return new GetStoreLogsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetStoreLogsResponse {
    return new GetStoreLogsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetStoreLogsResponse | PlainMessage<GetStoreLogsResponse> | undefined, b: GetStoreLogsResponse | PlainMessage<GetStoreLogsResponse> | undefined): boolean {
    return proto3.util.equals(GetStoreLogsResponse, a, b);
  }
}

/**
 * @generated from message evm_indexer.v1.GetLatestStoreLogsRequest
 */
export class GetLatestStoreLogsRequest extends Message<GetLatestStoreLogsRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: uint64 limit = 2;
   */
  limit = protoInt64.zero;

  constructor(data?: PartialMessage<GetLatestStoreLogsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "evm_indexer.v1.GetLatestStoreLogsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "limit", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetLatestStoreLogsRequest {
    return new GetLatestStoreLogsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetLatestStoreLogsRequest {
    return new GetLatestStoreLogsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetLatestStoreLogsRequest {
    return new GetLatestStoreLogsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetLatestStoreLogsRequest | PlainMessage<GetLatestStoreLogsRequest> | undefined, b: GetLatestStoreLogsRequest | PlainMessage<GetLatestStoreLogsRequest> | undefined): boolean {
    return proto3.util.equals(GetLatestStoreLogsRequest, a, b);
  }
}

/**
 * @generated from message evm_indexer.v1.GetLatestStoreLogsResponse
 */
export class GetLatestStoreLogsResponse extends Message<GetLatestStoreLogsResponse> {
  /**
   * @generated from field: bool success = 1;
   */
  success = false;

  /**
   * @generated from field: string error = 2;
   */
  error = "";

  /**
   * @generated from field: repeated evm_indexer.v1.EvmLog logs = 3;
   */
  logs: EvmLog[] = [];

  constructor(data?: PartialMessage<GetLatestStoreLogsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "evm_indexer.v1.GetLatestStoreLogsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "success", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "error", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "logs", kind: "message", T: EvmLog, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetLatestStoreLogsResponse {
    return new GetLatestStoreLogsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetLatestStoreLogsResponse {
    return new GetLatestStoreLogsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetLatestStoreLogsResponse {
    return new GetLatestStoreLogsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetLatestStoreLogsResponse | PlainMessage<GetLatestStoreLogsResponse> | undefined, b: GetLatestStoreLogsResponse | PlainMessage<GetLatestStoreLogsResponse> | undefined): boolean {
    return proto3.util.equals(GetLatestStoreLogsResponse, a, b);
  }
}

/**
 * @generated from message evm_indexer.v1.GetStoreLogsStreamRequest
 */
export class GetStoreLogsStreamRequest extends Message<GetStoreLogsStreamRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: uint64 from_block = 2;
   */
  fromBlock = protoInt64.zero;

  /**
   * @generated from field: bool to_latest = 3;
   */
  toLatest = false;

  /**
   * @generated from field: uint64 to_block = 4;
   */
  toBlock = protoInt64.zero;

  /**
   * @generated from field: uint64 batch_size = 5;
   */
  batchSize = protoInt64.zero;

  constructor(data?: PartialMessage<GetStoreLogsStreamRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "evm_indexer.v1.GetStoreLogsStreamRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "from_block", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "to_latest", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "to_block", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 5, name: "batch_size", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetStoreLogsStreamRequest {
    return new GetStoreLogsStreamRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetStoreLogsStreamRequest {
    return new GetStoreLogsStreamRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetStoreLogsStreamRequest {
    return new GetStoreLogsStreamRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetStoreLogsStreamRequest | PlainMessage<GetStoreLogsStreamRequest> | undefined, b: GetStoreLogsStreamRequest | PlainMessage<GetStoreLogsStreamRequest> | undefined): boolean {
    return proto3.util.equals(GetStoreLogsStreamRequest, a, b);
  }
}

/**
 * @generated from message evm_indexer.v1.GetStoreLogsStreamResponse
 */
export class GetStoreLogsStreamResponse extends Message<GetStoreLogsStreamResponse> {
  /**
   * @generated from field: repeated evm_indexer.v1.EvmLog logs = 3;
   */
  logs: EvmLog[] = [];

  constructor(data?: PartialMessage<GetStoreLogsStreamResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "evm_indexer.v1.GetStoreLogsStreamResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 3, name: "logs", kind: "message", T: EvmLog, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetStoreLogsStreamResponse {
    return new GetStoreLogsStreamResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetStoreLogsStreamResponse {
    return new GetStoreLogsStreamResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetStoreLogsStreamResponse {
    return new GetStoreLogsStreamResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetStoreLogsStreamResponse | PlainMessage<GetStoreLogsStreamResponse> | undefined, b: GetStoreLogsStreamResponse | PlainMessage<GetStoreLogsStreamResponse> | undefined): boolean {
    return proto3.util.equals(GetStoreLogsStreamResponse, a, b);
  }
}

/**
 * @generated from message evm_indexer.v1.RefetchPipelineBlockRangeRequest
 */
export class RefetchPipelineBlockRangeRequest extends Message<RefetchPipelineBlockRangeRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: uint64 from_block = 2;
   */
  fromBlock = protoInt64.zero;

  constructor(data?: PartialMessage<RefetchPipelineBlockRangeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "evm_indexer.v1.RefetchPipelineBlockRangeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "from_block", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RefetchPipelineBlockRangeRequest {
    return new RefetchPipelineBlockRangeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RefetchPipelineBlockRangeRequest {
    return new RefetchPipelineBlockRangeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RefetchPipelineBlockRangeRequest {
    return new RefetchPipelineBlockRangeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RefetchPipelineBlockRangeRequest | PlainMessage<RefetchPipelineBlockRangeRequest> | undefined, b: RefetchPipelineBlockRangeRequest | PlainMessage<RefetchPipelineBlockRangeRequest> | undefined): boolean {
    return proto3.util.equals(RefetchPipelineBlockRangeRequest, a, b);
  }
}

/**
 * @generated from message evm_indexer.v1.RefetchPipelineBlockRangeResponse
 */
export class RefetchPipelineBlockRangeResponse extends Message<RefetchPipelineBlockRangeResponse> {
  /**
   * @generated from field: bool success = 1;
   */
  success = false;

  /**
   * @generated from field: string error = 2;
   */
  error = "";

  constructor(data?: PartialMessage<RefetchPipelineBlockRangeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "evm_indexer.v1.RefetchPipelineBlockRangeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "success", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "error", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RefetchPipelineBlockRangeResponse {
    return new RefetchPipelineBlockRangeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RefetchPipelineBlockRangeResponse {
    return new RefetchPipelineBlockRangeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RefetchPipelineBlockRangeResponse {
    return new RefetchPipelineBlockRangeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RefetchPipelineBlockRangeResponse | PlainMessage<RefetchPipelineBlockRangeResponse> | undefined, b: RefetchPipelineBlockRangeResponse | PlainMessage<RefetchPipelineBlockRangeResponse> | undefined): boolean {
    return proto3.util.equals(RefetchPipelineBlockRangeResponse, a, b);
  }
}

